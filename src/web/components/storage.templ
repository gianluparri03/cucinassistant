package components

import (
	"strconv"

	"cucinassistant/database"
	"cucinassistant/langs"
)

templ StorageAddArticles(SID int, sections []database.Section) {
	{{ baseurl := "/storage" }}
	if SID > 0 {
		{{ baseurl = baseurl + "/" + strconv.Itoa(SID) }}
	}
	@TemplateTitle(langs.Translate(ctx, langs.STR_ADD_ARTICLES), baseurl)

    <form method="POST">
        <button class="icon" onclick="removeItem(event);">
			<i class="fas fa-minus"></i>
		</button>
        <button class="icon" onclick="addItem(event);">
			<i class="fas fa-plus"></i>
		</button>
        <button class="icon-text">
			<i class="fas fa-check"></i> { langs.Translate(ctx, langs.STR_CONFIRM) }
		</button>

        <div id="new-items">
            <div class="item article hidden">
                <input class="name" nametemplate="article-ID-name"
					type="text" placeholder={ langs.Translate(ctx, langs.STR_NAME) }>
                <input class="expiration" nametemplate="article-ID-expiration"
					type="date" placeholder={ langs.Translate(ctx, langs.STR_EXPIRATION) }>
                <input class="quantity" nametemplate="article-ID-quantity"
					type="number" step="any" placeholder={ langs.Translate(ctx, langs.STR_QUANTITY) }>

				if SID <= 0 {
                    <select class="section" nametemplate="article-ID-section">
                        <option selected disabled>
							{ langs.Translate(ctx, langs.STR_SECTION) }
						</option>

						for _, section := range sections {
							<option value={ strconv.Itoa(section.SID) }>
								{ section.Name }
							</option>
						}
                    </select>
				}
            </div>
        </div>
    </form>

	@templ.JSFuncCall("addItem")
}

templ StorageDashboard(sections []database.Section) {
    @TemplateTitle(langs.Translate(ctx, langs.STR_STORAGE), "/")

    <button class="icon-text" hx-get="/storage/view">
		<i class="fas fa-box"></i> { langs.Translate(ctx, langs.STR_ALL_ARTICLES) }
	</button>

    <button class="icon-text" hx-get="/storage/add">
		<i class="fas fa-plus"></i> { langs.Translate(ctx, langs.STR_ADD_ARTICLES) }
	</button>

    <div class="dashboard">
		for _, section := range sections {
			{{ baseurl := "/storage/" + strconv.Itoa(section.SID) }}
			<button hx-get={ baseurl }>
                <i class="fas fa-box"></i>
				<span>{ section.Name }</span>
            </button>
		}

        <button hx-get="/storage/new" class="transparent">
            <i class="fas fa-plus"></i>
            <span>{ langs.Translate(ctx, langs.STR_NEW_SECTION) }</span>
        </button>
    </div>
}

templ StorageEditArticle(SID int, article database.Article) {
	{{ baseurl := "/storage/" + strconv.Itoa(SID) }}
    @TemplateTitle(langs.Translate(ctx, langs.STR_EDIT_ARTICLE), baseurl)

    <form method="POST">
		{{ classes := "article" }}
		if article.IsExpired() {
			{{ classes += " expired" }}
		}

		<div class={ classes } onchange="swapContent();">
			<input class="name" placeholder="Nome" value={ article.Name } name="name">

            <input class="expiration" placeholder="Scadenza"
				if article.Expiration != nil {
					value={ article.FormatExpiration() }
				}
                type="date" name="expiration">

            <input class="quantity" placeholder="QuantitÃ "
				if article.Quantity != nil {
					value={ strconv.FormatFloat(float64(*article.Quantity), 'f', -1, 32) }
				}
                type="number" step="any" name="quantity">
        </div>

		if article.Prev != nil {
			{{ prevurl := baseurl + "/" + strconv.Itoa(*article.Prev) }}
			<button class="icon pre-swap" hx-get={ prevurl }>
				<i class="fas fa-chevron-left"></i>
			</button>
		} else {
			<button class="icon pre-swap" disabled>
				<i class="fas"></i>
			</button>
		}

		<span></span>

		{{ deleteurl := baseurl + "/" + strconv.Itoa(article.AID) + "/delete" }}
		<button class="icon-text pre-swap" hx-post={ deleteurl } hx-push-url="false">
            <i class="fas fa-trash"></i> { langs.Translate(ctx, langs.STR_DELETE) }
        </button>

		{{ cancelurl := baseurl + "/" + strconv.Itoa(article.AID) }}
		<button class="icon-text post-swap hidden" hx-get={ cancelurl } hx-push-url="false">
            <i class="fas fa-undo"></i> { langs.Translate(ctx, langs.STR_CANCEL) }
        </button>

        <button class="icon-text post-swap hidden" hx-push-url="false">
            <i class="fas fa-check"></i> { langs.Translate(ctx, langs.STR_SAVE) }
        </button>

		if article.Next != nil {
			{{ nexturl := baseurl + "/" + strconv.Itoa(*article.Next) }}
			<button class="icon pre-swap" hx-get={ nexturl }>
				<i class="fas fa-chevron-right"></i>
			</button>
		} else {
			<button class="icon pre-swap" disabled>
				<i class="fas"></i>
			</button>
		}
    </form>
}

templ StorageEditSection(section database.Section) {
	{{ baseurl := "/storage/" + strconv.Itoa(section.SID) }}
    @TemplateTitle(langs.Translate(ctx, langs.STR_EDIT_SECTION), baseurl)

    <b>{ langs.Translate(ctx, langs.STR_NAME) }</b>
    <form method="POST">
		<input type="text" name="name" value={ section.Name } required> <br>
        <button class="icon-text">
			<i class="fas fa-check"></i> { langs.Translate(ctx, langs.STR_SAVE) }
		</button>
    </form>

    <br>

    <b>{ langs.Translate(ctx, langs.STR_DELETE) }</b>
    <div class="pre-swap">
        <button class="icon-text" onclick="swapContent();">
			<i class="fas fa-trash"></i> { langs.Translate(ctx, langs.STR_DELETE) }
		</button>
    </div>
    <div class="post-swap hidden">
        { langs.Translate(ctx, langs.STR_DELETE_SECTION_TEXT) } <br>
		<button class="icon-text" hx-post={ baseurl + "/delete" } hx-push-url="false">
            <i class="fas fa-check"></i> { langs.Translate(ctx, langs.STR_CONFIRM) }
        </button>
    </div>
}

templ StorageNewSection() {
    @TemplateTitle(langs.Translate(ctx, langs.STR_NEW_SECTION), "/storage")

    <form method="POST">
        { langs.Translate(ctx, langs.STR_NAME) } <br>
		<input type="text" name="name" required> <br>

        <button class="icon-text">
			<i class="fas fa-check"></i> { langs.Translate(ctx, langs.STR_CONFIRM) }
		</button>
    </form>
}

templ StorageSearchArticles(target string, back string) {
    @TemplateTitle(langs.Translate(ctx, langs.STR_SEARCH_ARTICLES), back)

    <form method="GET" action={ templ.SafeURL(target) }>
        { langs.Translate(ctx, langs.STR_NAME) } <br>
        <input name="search" required> <br>

        <button class="icon">
			<i class="fas fa-search"></i>
		</button>
    </form>
}

templ viewArticles(articles []database.Article) {
	for _, article := range articles {
		{{ classes := "article" }}
		if article.IsExpired() {
			{{ classes += " expired" }}
		}

		<div class={ classes } hx-get={ "/storage/" + strconv.Itoa(article.SID) + "/" + strconv.Itoa(article.AID) }>
			<input class="name" value={ article.Name } readonly>
			if article.Expiration != nil {
				<input class="expiration" type="date" readonly
					value={ article.FormatExpiration() }>
			}
			if article.Quantity != nil {
				<input class="quantity" type="number" readonly
					value={ strconv.FormatFloat(float64(*article.Quantity), 'f', -1, 32) }>
			}
		</div>
	}
}

templ StorageViewSectionArticles(section database.Section, search string) {
	{{ baseurl := "/storage/" + strconv.Itoa(section.SID) }}
	@TemplateTitle(section.Name, "/storage")

    <div>
		if search != "" {
            <div>
                { langs.Translate(ctx, langs.STR_CURRENT_SEARCH) }: "<i>{ search }</i>".
				<a hx-get={ baseurl }>{ langs.Translate(ctx, langs.STR_CANCEL) }</a>
            </div>
		} else {
			<button class="icon-text" hx-get={ baseurl + "/edit" }>
				<i class="fas fa-edit"></i> { langs.Translate(ctx, langs.STR_EDIT_SECTION) }
			</button>
            <br>
			<button class="icon-text" hx-get={ baseurl + "/search" }>
				<i class="fas fa-search"></i> { langs.Translate(ctx, langs.STR_SEARCH_ARTICLES) }
			</button>
			<button class="icon-text" hx-get={ baseurl + "/add" }>
				<i class="fas fa-plus"></i> { langs.Translate(ctx, langs.STR_ADD_ARTICLES) }
			</button>
        }

        <br>
		@viewArticles(section.Articles)

		if len(section.Articles) == 0 {
			if search != "" {
				<i>{ langs.Translate(ctx, langs.STR_SEARCH_EMPTY) }</i>
			} else {
				<i>{ langs.Translate(ctx, langs.STR_SECTION_EMPTY) }</i>
			}
		}
    </div>
}

templ StorageViewAllArticles(articles []database.Article, search string) {
	@TemplateTitle(langs.Translate(ctx, langs.STR_ALL_ARTICLES), "/storage")

    <div>
		if search != "" {
            <div>
                { langs.Translate(ctx, langs.STR_CURRENT_SEARCH) }: "<i>{ search }</i>".
				<a hx-get="/storage/view">{ langs.Translate(ctx, langs.STR_CANCEL) }</a>
            </div>
		} else {
			<button class="icon-text" hx-get="/storage/search">
				<i class="fas fa-search"></i> { langs.Translate(ctx, langs.STR_SEARCH_ARTICLES) }
			</button>
			<button class="icon-text" hx-get="/storage/add">
				<i class="fas fa-plus"></i> { langs.Translate(ctx, langs.STR_ADD_ARTICLES) }
			</button>
        }

        <br>
		@viewArticles(articles)

		if len(articles) == 0 {
			if search != "" {
				<i>{ langs.Translate(ctx, langs.STR_SEARCH_EMPTY) }</i>
			} else {
				<i>{ langs.Translate(ctx, langs.STR_STORAGE_EMPTY) }</i>
			}
		}
    </div>
}
