package components

import (
	"strconv"

	"cucinassistant/database"
	"cucinassistant/langs"
)

templ Storage(sections []database.Section) {
	@TemplateTitle(langs.Translate(ctx, langs.STR_STORAGE), "/")
	<button class="icon-text" hx-get="/storage/0">
		<i class="ph ph-package"></i> { langs.Translate(ctx, langs.STR_ALL_ARTICLES) }
	</button>
	<button class="icon-text" hx-get="/storage/0/add">
		<i class="ph ph-plus"></i> { langs.Translate(ctx, langs.STR_ADD_ARTICLES) }
	</button>
	<div class="dashboard">
		for _, section := range sections {
			<button hx-get={ "/storage/" + strconv.Itoa(section.SID) }>
				<i class="ph ph-package"></i>
				<span>{ section.Name }</span>
			</button>
		}
		<button hx-get="/storage/new" class="transparent">
			<i class="ph ph-plus"></i>
			<span>{ langs.Translate(ctx, langs.STR_NEW_SECTION) }</span>
		</button>
	</div>
}

templ StorageNew() {
	@TemplateTitle(langs.Translate(ctx, langs.STR_NEW_SECTION), "/storage")
	<form method="POST">
		{ langs.Translate(ctx, langs.STR_NAME) }
		<br/>
		<input type="text" name="name" required/>
		<br/>
		<button class="icon-text">
			<i class="ph ph-check"></i> { langs.Translate(ctx, langs.STR_CONFIRM) }
		</button>
	</form>
}

templ StorageSection(section database.Section, search string, secNames map[int]string) {
	{{ baseurl := "/storage/" + strconv.Itoa(section.SID) }}
	if section.SID == 0 {
		@TemplateTitle(langs.Translate(ctx, langs.STR_ALL_ARTICLES), "/storage")
	} else {
		@TemplateTitle(section.Name, "/storage")
	}
	<div>
		if search != "" {
			<div>
				{ langs.Translate(ctx, langs.STR_CURRENT_SEARCH) }: "<i>{ search }</i>".
				<a hx-get={ baseurl }>{ langs.Translate(ctx, langs.STR_CANCEL) }</a>
			</div>
		} else {
			if section.SID != 0 {
				<button class="icon-text" hx-get={ baseurl + "/edit" }>
					<i class="ph ph-note-pencil"></i> { langs.Translate(ctx, langs.STR_EDIT_SECTION) }
				</button>
				<br/>
				<button class="icon-text" hx-get={ baseurl + "/add" }>
					<i class="ph ph-plus"></i> { langs.Translate(ctx, langs.STR_ADD_ARTICLES) }
				</button>
			}
			<button class="icon-text" hx-get={ baseurl + "/search" }>
				<i class="ph ph-magnifying-glass"></i> { langs.Translate(ctx, langs.STR_SEARCH_ARTICLES) }
			</button>
		}
		<br/>
		for _, article := range section.Articles {
			{{ classes := "article" }}
			if article.IsExpired() {
				{{ classes += " expired" }}
			}
			<div class={ classes } hx-get={ baseurl + "/" + strconv.Itoa(article.AID) }>
				<input class="name" value={ article.Name } readonly/>
				if article.Expiration != nil {
					<input
						class="expiration"
						type="date"
						readonly
						value={ article.FormatExpiration() }
					/>
				}
				if article.Quantity != nil {
					<input
						class="quantity"
						type="number"
						readonly
						value={ strconv.FormatFloat(float64(*article.Quantity), 'f', -1, 32) }
					/>
				}
				if section.SID == 0 {
					<select class="section" disabled>
						<option>{ secNames[article.SID] }</option>
					</select>
				}
			</div>
		}
		if len(section.Articles) == 0 {
			if search != "" {
				<i>{ langs.Translate(ctx, langs.STR_SEARCH_EMPTY) }</i>
			} else {
				<i>{ langs.Translate(ctx, langs.STR_SECTION_EMPTY) }</i>
			}
		}
	</div>
}

templ StorageSectionAdd(SID int, sections []database.Section) {
	{{ back := "/storage" }}
	if SID != 0 {
		{{ back = back + "/" + strconv.Itoa(SID) }}
	}
	@TemplateTitle(langs.Translate(ctx, langs.STR_ADD_ARTICLES), back)
	<form method="POST">
		<button class="icon" onclick="removeItem(event);">
			<i class="ph ph-minus"></i>
		</button>
		<button class="icon" onclick="addItem(event);">
			<i class="ph ph-plus"></i>
		</button>
		<button class="icon-text">
			<i class="ph ph-check"></i> { langs.Translate(ctx, langs.STR_SAVE) }
		</button>
		<div id="new-items">
			<div class="item article hidden">
				<input
					class="name"
					type="text"
					placeholder={ langs.Translate(ctx, langs.STR_NAME) }
					nametemplate="article-ID-name"
				/>
				<input
					class="expiration"
                    type="date"
					placeholder={ langs.Translate(ctx, langs.STR_EXPIRATION) }
					nametemplate="article-ID-expiration"
				/>
				<input
					class="quantity"
                    type="number" step="any"
					placeholder={ langs.Translate(ctx, langs.STR_QUANTITY) }
					nametemplate="article-ID-quantity"
				/>
				if SID == 0 {
					<select class="section" nametemplate="article-ID-section">
						<option selected disabled>
							{ langs.Translate(ctx, langs.STR_SECTION) }
						</option>
						for _, section := range sections {
							<option value={ strconv.Itoa(section.SID) }>
								{ section.Name }
							</option>
						}
					</select>
				} else {
					<input
						class="section hidden"
						value={ strconv.Itoa(SID) }
						nametemplate="article-ID-section"
					/>
				}
			</div>
		</div>
	</form>
	@templ.JSFuncCall("setItemsCount", 0)
	@templ.JSFuncCall("addItem")
}

templ StorageSectionEdit(section database.Section) {
	{{ baseurl := "/storage/" + strconv.Itoa(section.SID) }}
	@TemplateTitle(langs.Translate(ctx, langs.STR_EDIT_SECTION), baseurl)
	<b>{ langs.Translate(ctx, langs.STR_NAME) }</b>
	<form method="POST">
		<input type="text" name="name" value={ section.Name } required/>
		<br/>
		<button class="icon-text">
			<i class="ph ph-check"></i> { langs.Translate(ctx, langs.STR_SAVE) }
		</button>
	</form>
	<br/>
	<b>{ langs.Translate(ctx, langs.STR_DELETE) }</b>
	<div class="pre-swap">
		<button class="icon-text" onclick="swapContent();">
			<i class="ph ph-trash"></i> { langs.Translate(ctx, langs.STR_DELETE) }
		</button>
	</div>
	<div class="post-swap hidden">
		{ langs.Translate(ctx, langs.STR_DELETE_SECTION_TEXT) }
		<br/>
		<button class="icon-text" hx-post={ baseurl + "/delete" } hx-push-url="false">
			<i class="ph ph-check"></i> { langs.Translate(ctx, langs.STR_CONFIRM) }
		</button>
	</div>
}

templ StorageSectionSearch(target string) {
	@TemplateTitle(langs.Translate(ctx, langs.STR_SEARCH_ARTICLES), target)
	<form method="GET" action={ templ.SafeURL(target) }>
		<input name="search" required/>
		<br/>
		<button class="icon">
			<i class="ph ph-magnifying-glass"></i>
		</button>
	</form>
}

templ StorageArticle(SID int, article database.Article, prev int, next int, sections []database.Section) {
	{{ sec_url := "/storage/" + strconv.Itoa(SID) }}
	{{ art_url := "/storage/" + strconv.Itoa(SID) + "/" + strconv.Itoa(article.AID) }}
	@TemplateTitle(langs.Translate(ctx, langs.STR_EDIT_ARTICLE), sec_url)
	<form method="POST">
		{{ classes := "article" }}
		if article.IsExpired() {
			{{ classes += " expired" }}
		}
		<div class={ classes } onchange="swapContent();">
			<input
				name="name"
				class="name"
				placeholder={ langs.Translate(ctx, langs.STR_NAME) }
				value={ article.Name }
			/>
			<input
				name="expiration"
				class="expiration"
                type="date"
				placeholder={ langs.Translate(ctx, langs.STR_EXPIRATION) }
				if article.Expiration != nil {
					value={ article.FormatExpiration() }
				}
			/>
			<input
				class="quantity"
				name="quantity"
                type="number" step="any"
				placeholder={ langs.Translate(ctx, langs.STR_QUANTITY) }
				if article.Quantity != nil {
					value={ strconv.FormatFloat(float64(*article.Quantity), 'f', -1, 32) }
				}
			/>
			<select class="section" name="section">
				<option selected disabled>
					{ langs.Translate(ctx, langs.STR_SECTION) }
				</option>
				for _, section := range sections {
					<option value={ strconv.Itoa(section.SID) } selected?={ section.SID == article.SID }>
						{ section.Name }
					</option>
				}
			</select>
		</div>
		if prev != 0 {
			<button class="icon pre-swap" hx-get={ sec_url + "/" + strconv.Itoa(prev) }>
				<i class="ph ph-arrow-left"></i>
			</button>
		} else {
			<button class="icon pre-swap" disabled>
				<i class="ph ph-arrow-left empty-icon"></i>
			</button>
		}
		<span></span>
		<button class="icon-text pre-swap" hx-post={ art_url + "/delete" }>
			<i class="ph ph-trash"></i> { langs.Translate(ctx, langs.STR_DELETE) }
		</button>
		<button class="icon-text post-swap hidden" hx-get={ art_url } hx-push-url="false">
			<i class="ph ph-arrow-counter-clockwise"></i> { langs.Translate(ctx, langs.STR_CANCEL) }
		</button>
		<button class="icon-text post-swap hidden" hx-push-url="false">
			<i class="ph ph-check"></i> { langs.Translate(ctx, langs.STR_SAVE) }
		</button>
		if next != 0 {
			<button class="icon pre-swap" hx-get={ sec_url + "/" + strconv.Itoa(next) }>
				<i class="ph ph-arrow-right"></i>
			</button>
		} else {
			<button class="icon pre-swap" disabled>
				<i class="ph ph-arrow-right empty-icon"></i>
			</button>
		}
	</form>
}
